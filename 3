from gpiozero import Button
from time import sleep
import I2C_LCD_driver

# Set up the LCD display
lcd = I2C_LCD_driver.lcd()

# Set up variables to store the entered password and track whether the password is correct
entered_password = ""
password_correct = False

# Set up the password
password = "123456"

# Set up variables to store the current row and column index
row_index = 0
col_index = 0

# Set up a dictionary to map the button press to a character
button_map = {
    (0, 0): "1",
    (0, 1): "2",
    (0, 2): "3",
    (0, 3): "A",
    (1, 0): "4",
    (1, 1): "5",
    (1, 2): "6",
    (1, 3): "B",
    (2, 0): "7",
    (2, 1): "8",
    (2, 2): "9",
    (2, 3): "C",
    (3, 0): "*",
    (3, 1): "0",
    (3, 2): "#",
    (3, 3): "D"
}

# Set up lists of Button objects for the rows and columns
rows = [Button(pin) for pin in raw]
cols = [Button(pin) for pin in col]

# Wait for the user to press a button
while not password_correct:
    lcd.lcd_clear()
    lcd.lcd_display_string("Enter the password:", 1, 0)

    # Check if any button in the current row is pressed
    for i, row in enumerate(rows):
        if row.is_pressed:
            row_index = i
            break
    else:
        # If no button in the current row is pressed, move to the next row
        row_index = (row_index + 1) % len(rows)

    # Check if any button in the current column is pressed
    for i, col in enumerate(cols):
        if col.is_pressed:
            col_index = i
            break
    else:
        # If no button in the current column is pressed, move to the next column
        col_index = (col_index + 1) % len(cols)
    
    # Check if a button press was detected
    if row_index is not None and col_index is not None:
        # Append the corresponding character to the entered password
        entered_password += button_map[(row_index, col_index)]
        row_index = None
        col_index = None
    
    # Display the entered password on the first line of the LCD
    lcd.lcd_display_string(entered_password, 2, 0)

    # Check if the entered password is correct
    if entered_password == password:
        password_correct = True
    # If the password is incorrect, display an error message on the LCD
    elif entered_password != password and "#" in entered_password:
        lcd.lcd_clear()
        lcd.lcd_display_string("Incorrect:, 1,0)
        lcd.lcd_display_string("Re-enter the password:", 2, 0)
        entered_password = "" # reset the entered password

# If the password is correct, display a success message on the LCD
lcd.lcd_clear()
lcd.lcd_display_string("Correct password!", 1, 0)

